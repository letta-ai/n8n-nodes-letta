name: Auto Update Letta SDK

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update-sdk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Check for SDK updates
        id: check-update
        run: |
          # Get current version
          CURRENT_VERSION=$(npm list @letta-ai/letta-client --depth=0 --json | jq -r '.dependencies["@letta-ai/letta-client"].version')
          echo "Current version: $CURRENT_VERSION"

          # Get latest version
          LATEST_VERSION=$(npm view @letta-ai/letta-client version)
          echo "Latest version: $LATEST_VERSION"

          # Compare versions
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "SDK is already up to date"
            echo "update_available=false" >> $GITHUB_OUTPUT
          else
            echo "SDK update available: $CURRENT_VERSION -> $LATEST_VERSION"
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create update branch
        if: steps.check-update.outputs.update_available == 'true'
        run: |
          BRANCH_NAME="auto-update-sdk-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: Update SDK
        if: steps.check-update.outputs.update_available == 'true'
        run: |
          npm install @letta-ai/letta-client@latest
          git add package.json package-lock.json

      - name: Run format check
        if: steps.check-update.outputs.update_available == 'true'
        run: npm run format:check
        continue-on-error: true

      - name: Run linter
        if: steps.check-update.outputs.update_available == 'true'
        run: npm run lint

      - name: Run tests
        if: steps.check-update.outputs.update_available == 'true'
        run: npm test -- --run

      - name: Build
        if: steps.check-update.outputs.update_available == 'true'
        run: npm run build

      - name: Commit changes
        if: steps.check-update.outputs.update_available == 'true'
        run: |
          git commit -m "chore: update @letta-ai/letta-client from ${{ steps.check-update.outputs.current_version }} to ${{ steps.check-update.outputs.latest_version }}

          - Updated @letta-ai/letta-client to latest version
          - All tests passing
          - Build successful

          ü§ñ Auto-generated by SDK update workflow"

      - name: Push changes
        if: steps.check-update.outputs.update_available == 'true'
        run: |
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        if: steps.check-update.outputs.update_available == 'true'
        id: create-pr
        run: |
          PR_URL=$(gh pr create \
            --title "chore: update Letta SDK to ${{ steps.check-update.outputs.latest_version }}" \
            --body "$(cat <<'EOF'
          ## ü§ñ Automated SDK Update

          This PR automatically updates the Letta SDK to the latest version.

          ### Changes
          - **Current version**: `${{ steps.check-update.outputs.current_version }}`
          - **New version**: `${{ steps.check-update.outputs.latest_version }}`

          ### Verification
          - ‚úÖ Linting passed
          - ‚úÖ Tests passed
          - ‚úÖ Build successful

          ### Notes
          This PR was automatically generated by the SDK update workflow. All tests have passed, so it should be safe to merge.

          If there are any issues, the workflow will fail and create an issue instead of a PR.

          ---
          ü§ñ Generated by [Auto Update SDK Workflow](.github/workflows/auto-update-sdk.yml)
          EOF
          )" \
            --base main \
            --head $BRANCH_NAME)

          echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
          echo "Pull request created: $PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        if: steps.check-update.outputs.update_available == 'true'
        run: |
          # Get PR number from URL
          PR_NUMBER=$(echo "${{ steps.create-pr.outputs.PR_URL }}" | grep -o '[0-9]*$')

          # Enable auto-merge with squash strategy
          gh pr merge $PR_NUMBER --auto --squash

          echo "Auto-merge enabled for PR #$PR_NUMBER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create issue on failure
        if: failure() && steps.check-update.outputs.update_available == 'true'
        run: |
          gh issue create \
            --title "‚ö†Ô∏è SDK Update Failed: Letta SDK ${{ steps.check-update.outputs.latest_version }}" \
            --body "$(cat <<'EOF'
          ## ‚ö†Ô∏è Automated SDK Update Failed

          The automatic update of the Letta SDK failed during the CI process.

          ### Details
          - **Attempted version**: `${{ steps.check-update.outputs.latest_version }}`
          - **Current version**: `${{ steps.check-update.outputs.current_version }}`
          - **Workflow run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ### Action Required
          Please review the workflow logs and update the SDK manually:

          ```bash
          npm install @letta-ai/letta-client@latest
          npm test
          npm run build
          ```

          ### Possible Causes
          - Breaking changes in the SDK
          - Test failures
          - Build errors
          - Type incompatibilities

          ---
          ü§ñ Generated by [Auto Update SDK Workflow](.github/workflows/auto-update-sdk.yml)
          EOF
          )" \
            --label "dependencies,automation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check-update.outputs.update_available }}" = "true" ]; then
            if [ "${{ job.status }}" = "success" ]; then
              echo "‚úÖ SDK updated successfully and PR created with auto-merge enabled"
            else
              echo "‚ùå SDK update failed - issue created for manual review"
            fi
          else
            echo "‚ÑπÔ∏è SDK is already up to date"
          fi
